{"meta":{"title":"Void","subtitle":null,"description":"爱吃爱玩的程序猿，热爱生活、热爱美食、热爱运动，有理想的一笔!","author":"Zhao Xiao Dan","url":"http://localhost:4000"},"pages":[{"title":"Tags","date":"2018-05-22T08:31:52.960Z","updated":"2018-05-20T12:02:05.372Z","comments":true,"path":"tags/index.html","permalink":"http://localhost:4000/tags/index.html","excerpt":"","text":""},{"title":"Project","date":"2018-05-22T00:26:50.133Z","updated":"2018-05-20T12:02:05.372Z","comments":true,"path":"project/index.html","permalink":"http://localhost:4000/project/index.html","excerpt":"","text":""},{"title":"About","date":"2018-05-22T00:26:50.132Z","updated":"2018-05-20T12:02:05.372Z","comments":true,"path":"about/index.html","permalink":"http://localhost:4000/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring boot 系列（四）","slug":"Spring boot 系列（四）","date":"2018-06-07T02:48:15.000Z","updated":"2018-06-12T09:41:15.419Z","comments":true,"path":"2018/06/07/Spring boot 系列（四）/","link":"","permalink":"http://localhost:4000/2018/06/07/Spring boot 系列（四）/","excerpt":"","text":"","categories":[],"tags":[{"name":"spring boot","slug":"spring-boot","permalink":"http://localhost:4000/tags/spring-boot/"},{"name":"filter","slug":"filter","permalink":"http://localhost:4000/tags/filter/"},{"name":"shiro","slug":"shiro","permalink":"http://localhost:4000/tags/shiro/"}]},{"title":"Spring boot 系列（三）","slug":"Spring boot 系列（三）","date":"2018-06-06T03:04:36.000Z","updated":"2018-06-06T03:12:47.603Z","comments":true,"path":"2018/06/06/Spring boot 系列（三）/","link":"","permalink":"http://localhost:4000/2018/06/06/Spring boot 系列（三）/","excerpt":"","text":"1. 修改打包方式 在pom.xml里设置 war 2. 移除嵌入式tomcat插件 在pom.xml里找到spring-boot-starter-web依赖节点，在其中添加如下代码 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;!-- 移除嵌入式tomcat插件 --&gt; &lt;!-- &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; --&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 3. 添加servlet-api的依赖&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 4. 修改启动类，继承 SpringBootServletInitializer 并重写 configure 方法 /** * SprintBootApplication */@SpringBootApplicationpublic class BootApplication extends SpringBootServletInitializer &#123; @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123; // 注意这里要指向原先用main方法执行的Application启动类 return application.sources(BootApplication.class); &#125; /** * @param args */ public static void main(String[] args) &#123; SpringApplication.run(BootApplication.class, args); &#125;&#125; 5. maven 打包 mvn clean compile package","categories":[],"tags":[{"name":"spring boot","slug":"spring-boot","permalink":"http://localhost:4000/tags/spring-boot/"},{"name":"tomcat部署","slug":"tomcat部署","permalink":"http://localhost:4000/tags/tomcat部署/"}]},{"title":"Spring boot 系列（二）","slug":"Spring boot 系列（二）","date":"2018-06-06T02:24:45.000Z","updated":"2018-06-06T03:03:24.177Z","comments":true,"path":"2018/06/06/Spring boot 系列（二）/","link":"","permalink":"http://localhost:4000/2018/06/06/Spring boot 系列（二）/","excerpt":"","text":"实现功能说明文件上传，并支持展示上传文件 问题描述 报错信息 org.springframework.web.multipart.MultipartException: Could not parse multipart servlet request; nested exception is java.io.IOException: The temporary upload location [/tmp/tomcat.2737591724424319502.8080/work/Tomcat/localhost/ROOT] is not valid 报错代码 : file.transferTo 方法 public String storeScale(MultipartFile file, String basePath, int maxWidth) throws Exception &#123; validateFile(file); String root = getRoot(); String path = FileNameUtils.genPathAndFileName(getExt(file.getOriginalFilename())); File temp = new File(root + appContext.getTempDir() + path); checkDirAndCreate(temp); try &#123; file.transferTo(temp); // 根据临时文件生成略缩图 String dest = root + basePath + path; ImageUtils.scaleImageByWidth(temp.getAbsolutePath(), dest, maxWidth); &#125; catch (Exception e) &#123; throw e; &#125; finally &#123; temp.delete(); &#125; return basePath + path;&#125; 问题分析 上面源码文件使用路径 ，相对路径, 预期路径应该是 root + appContext.getTempDir() + path ，但是报错却是一个系统临时文件路径 （Tomcat的） 其次，由于transferTo方法报错，应该是写文件的时候报错，跟踪源码如下 /** * Spring MultipartHttpServletRequest adapter, wrapping a Servlet 3.0 HttpServletRequest * and its Part objects. Parameters get exposed through the native request's getParameter * methods - without any custom processing on our side. * * @author Juergen Hoeller * @author Rossen Stoyanchev * @since 3.1 */public class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest &#123; ... @Override public void transferTo(File dest) throws IOException, IllegalStateException &#123; this.part.write(dest.getPath()); // 写文件方法入口 if (dest.isAbsolute() &amp;&amp; !dest.exists()) &#123; // Servlet 3.0 Part.write is not guaranteed to support absolute file paths: // may translate the given path to a relative location within a temp dir // (e.g. on Jetty whereas Tomcat and Undertow detect absolute paths). // At least we offloaded the file from memory storage; it'll get deleted // from the temp dir eventually in any case. And for our user's purposes, // we can manually copy it to the requested location as a fallback. FileCopyUtils.copy(this.part.getInputStream(), new FileOutputStream(dest)); &#125; &#125; ...&#125;/** * Adaptor to allow &#123;@link FileItem&#125; objects generated by the package renamed * commons-upload to be used by the Servlet 3.0 upload API that expects * &#123;@link Part&#125;s. */public class ApplicationPart implements Part &#123; ... @Override public void write(String fileName) throws IOException &#123; File file = new File(fileName); if (!file.isAbsolute()) &#123; // 此处判断如果不是绝对路径，则会添加location file = new File(location, fileName); &#125; try &#123; fileItem.write(file); &#125; catch (Exception e) &#123; throw new IOException(e); &#125; &#125; ...&#125; 源码一目了然，使用Servlet3.0的支持的上传文件功能时，如果我们没有使用绝对路径的话，transferTo方法会在相对路径前添加一个location路径，即：file = new File(location, fileName);。当然，这也影响了SpringMVC的Multipartfile的使用 解决方法 使用绝对路径 指定临时文件location路径 /** * 文件上传临时路径 */ @Bean MultipartConfigElement multipartConfigElement() &#123; MultipartConfigFactory factory = new MultipartConfigFactory(); String location = appContext.getRoot(); File file = new File(location); if (!file.exists()) &#123; file.mkdirs();&#125; factory.setLocation(location); return factory.createMultipartConfig(); &#125; /** * appContext.getRoot() 文件存放路径 */ @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry.addResourceHandler(\"/store/**\").addResourceLocations(\"file:\" + appContext.getRoot() + \"/store/\"); super.addResourceHandlers(registry); &#125; 文章参考：https://blog.csdn.net/daniel7443/article/details/51620308","categories":[],"tags":[{"name":"spring boot","slug":"spring-boot","permalink":"http://localhost:4000/tags/spring-boot/"},{"name":"文件上传","slug":"文件上传","permalink":"http://localhost:4000/tags/文件上传/"}]},{"title":"org.apache.maven.archiver.MavenArchiver.getManifest错误","slug":"eclipse-maven","date":"2018-05-30T03:36:53.000Z","updated":"2018-05-30T03:45:14.979Z","comments":true,"path":"2018/05/30/eclipse-maven/","link":"","permalink":"http://localhost:4000/2018/05/30/eclipse-maven/","excerpt":"","text":"在给eclipse换了高版本的maven插件后，引入jar包报如下的错误：org.apache.maven.archiver.MavenArchiver.getManifest(org.apache.maven.project 解决方法是：help–&gt;install new software, 然后add，添加如下链接， http://repo1.maven.org/maven2/.m2e/connectors/m2eclipse-mavenarchiver/0.17.2/N/LATEST/ 一直下一步就可以，后面提示重启eclipse，然后重启eclipse后，右击项目，点击maven–&gt;update project， 错误就没了","categories":[],"tags":[{"name":"eclipse","slug":"eclipse","permalink":"http://localhost:4000/tags/eclipse/"},{"name":"maven","slug":"maven","permalink":"http://localhost:4000/tags/maven/"}]},{"title":"Spring boot 系列（一）","slug":"Spring boot 系列（一）","date":"2018-05-30T03:17:11.000Z","updated":"2018-06-04T00:56:54.684Z","comments":true,"path":"2018/05/30/Spring boot 系列（一）/","link":"","permalink":"http://localhost:4000/2018/05/30/Spring boot 系列（一）/","excerpt":"","text":"Spring官方网站本身使用Spring框架开发，随着功能以及业务逻辑的日益复杂，应用伴随着大量的XML配置文件以及复杂的Bean依赖关系。随着Spring 3.0的发布，Spring IO团队逐渐开始摆脱XML配置文件，并且在开发过程中大量使用“约定优先配置”（convention over configuration）的思想来摆脱Spring框架中各类繁复纷杂的配置（即时是Java Config）。 Spring Boot正是在这样的一个背景下被抽象出来的开发框架，它本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于Spring框架的应用程序。也就是说，它并不是用来替代Spring的解决方案，而是和Spring框架紧密结合用于提升Spring开发者体验的工具。同时它集成了大量常用的第三方库配置（例如Jackson, JDBC, Mongo, Redis, Mail等等），Spring Boot应用中这些第三方库几乎可以零配置的开箱即用（out-of-the-box），大部分的Spring Boot应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。 相关文档 Spring 中文文档 http://spring.cndocs.ml/ Spring boot 中文文档 http://blog.geekidentity.com/spring/spring_boot_translation/ spring boot 2.0 官方文档 https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/ Spring Boot教程 https://www.yiibai.com/spring-boot/ spring boot 实践学习案例 https://github.com/JeffLi1993/springboot-learning-example","categories":[],"tags":[{"name":"spring boot","slug":"spring-boot","permalink":"http://localhost:4000/tags/spring-boot/"}]},{"title":"微信公共账号（一）","slug":"微信公共账号（一）","date":"2018-05-26T01:50:04.000Z","updated":"2018-06-04T00:51:37.373Z","comments":true,"path":"2018/05/26/微信公共账号（一）/","link":"","permalink":"http://localhost:4000/2018/05/26/微信公共账号（一）/","excerpt":"","text":"订目标，做计划，大量的行动。——陈安之言之易，行之难。——吕不韦 相关文档、工具 微信公众平台技术文档官网 微信Java开发工具包 weixin-java-tools weixin-java-tools Demo 微信服务号本地调试,参考外网访问你机器上的Demo 问题AES加密时的 java.security.InvalidKeyException: Illegal key size 异常程序代码// 设置加密模式为AES的CBC模式Cipher cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");SecretKeySpec keySpec = new SecretKeySpec(aesKey, \"AES\");IvParameterSpec iv = new IvParameterSpec(aesKey, 0, 16);cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);// 加密byte[] encrypted = cipher.doFinal(unencrypted);... 当执行到cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv); 时, 如果密钥大于128, 会抛出java.security.InvalidKeyException: Illegal key size 异常.因为密钥长度是受限制的, java运行时环境读到的是受限的policy文件. 文件位于${java_home}/jre/lib/security, 这种限制是因为美国对软件出口的控制. 处理办法: 在官方网站下载JCE无限制权限策略文件 JDK6的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.htmlJDK7的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.htmlJDK8的下载地址: http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html下载后解压，可以看到local_policy.jar和US_export_policy.jar以及readme.txt如果安装了JRE，将两个jar文件放到%JRE_HOME%\\lib\\security目录下覆盖原来的文件如果安装了JDK，还要将两个jar文件也放到%JDK_HOME%\\jre\\lib\\security目录下覆盖原来文件 更多问题参考weixin-java-tools微信Java SDK开发文档","categories":[],"tags":[{"name":"spring boot","slug":"spring-boot","permalink":"http://localhost:4000/tags/spring-boot/"},{"name":"maven","slug":"maven","permalink":"http://localhost:4000/tags/maven/"},{"name":"微信公共号","slug":"微信公共号","permalink":"http://localhost:4000/tags/微信公共号/"},{"name":"java","slug":"java","permalink":"http://localhost:4000/tags/java/"}]},{"title":"外网访问你机器上的Demo","slug":"外网访问你机器上的Demo","date":"2018-05-25T03:10:11.000Z","updated":"2018-05-25T03:22:00.630Z","comments":true,"path":"2018/05/25/外网访问你机器上的Demo/","link":"","permalink":"http://localhost:4000/2018/05/25/外网访问你机器上的Demo/","excerpt":"","text":"想在外网访问你机器上的demo? 几个内网端口映射服务网站 http://wendal.cn Nutz社区提供的ngrok服务，详细访问 https://nutz.cn/yvr/t/33b68q9106imspallbj4c6aa0p http://www.mofasuidao.cn/ 拥有魔法隧道，让你穿越世界，引领「内网穿透」潮流，为世界带来美好的改变 http://natapp.cn/ http://ngrok.io == http://ngrok.com http://ngrok.2bdata.com/ http://www.ngrok.cc/ http://www.nat123.com/ ngrok使用 下载ngrok,点我 打开shell或cmd，进入ngrok目录，运行 ngrok -config ngrok.cfg -subdomain my-domain 8080 如果运行失败，请更换my-domain为其它字符串，直至连接成功； 外网访问地址：http://my-domain.tunnel.qydev.com/ （注意my-domain要跟上面的一致）；","categories":[],"tags":[{"name":"代理","slug":"代理","permalink":"http://localhost:4000/tags/代理/"}]},{"title":"计划","slug":"计划","date":"2018-05-25T01:51:48.000Z","updated":"2018-05-25T09:05:34.208Z","comments":true,"path":"2018/05/25/计划/","link":"","permalink":"http://localhost:4000/2018/05/25/计划/","excerpt":"","text":"西汉·戴圣《礼记·中庸》：“凡事豫则立，不豫则废。” 计划 个人博客 微信服务号石门蓝小球 PC站Mvp51 个人博客 Hexo博客搭建教程 Hexo手机端样式调整 Hexo支持评论功能，目前计划评论功能不使用第三方插件 石门蓝小球 微信服务号后台，支持用户上传收集信息（文字、图片、语音） 支持查询石家庄附件球场，通过关键词+Hexo静态页面 Mvp51 设计图效果 附近球场、球友、球队功能支持","categories":[],"tags":[{"name":"计划","slug":"计划","permalink":"http://localhost:4000/tags/计划/"}]},{"title":"Hexo工作原理","slug":"Hexo如何工作","date":"2018-05-24T01:18:22.000Z","updated":"2018-05-24T01:27:54.140Z","comments":true,"path":"2018/05/24/Hexo如何工作/","link":"","permalink":"http://localhost:4000/2018/05/24/Hexo如何工作/","excerpt":"","text":"你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了： |$ hexo init // 创建一个新的hexo项目$ hexo new mynewblog // 新建一篇标题为mynewblog的文章$ hexo server // 为hexo在本地起一个http server, 然后通过浏览器访问博客$ hexo generate // 生成将要发布的博客网站包含html在内的静态资源$ hexo deploy // 将generate的结果发布到_config.yml中指定的仓库 | 可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题: 命令行中的hexo是什么 hexo是怎么将我们写好的markdown转换成html的 hexo插件是如何工作的 本地的hexo项目和git page有什么关系 本文不是: hexo的安装、使用教程 git page的使用教程 命令行中的hexo是什么?hexo项目在github上已经有超过17k的star了，但是你知道吗，日常我们在命令行”操作”hexo时所输入的hexo(例如hexo init)并不是这个17k个star的项目! 是的，我们在命令行中所输入的”hexo”实际是hexo-cli项目，该项目在github上的star还不足50个。 hexo可以粗略分为三个子项目，分别是: hexo-cli hexo (下文中用hexo core来指代) hexo plugins 其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。 请看下图:让我们结合这张图来大致看看这三个项目的作用(下面的链接均是指向Github中相关的源码): hexo-cli: hexo命令行项目，作用是: 启动hexo命令(进程)，及其参数解析机制。每次我们输入’hexo xxx’命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’) 实现hexo命令的三个初始参数(功能): init / version / help 加载hexo核心模块，并初始化 hexo core: hexo核心，他的主要作用如下: 实现了hexo功能扩展对象 实现了hexo核心功能, 如new, publish, generate等（其实是一些hexo插件，下文中会详细分析） hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类: 扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令) 扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件 从markdown到html的旅程简单来说，hexo中，从markdown到html的generate过程中做了两件事： 模板渲染 模板渲染 是的，就是这样，就是两次模板渲染。只不过两次渲染的输入、渲染模板的引擎、输出不一样。此处应该有一个表格：还得有一张图: 对上面表格和图的说明: hexo core在generate的过程中会产生一个对象，我们在这里把这个对象称为article。第一次渲染的主要目的就是给这个对象添加title,content等属性。其中: article.title, article.date, article.tags, article.categories等属性来自yml front的部分 article.content是markdown文章解析后的html片段 hexo项目目录下包含三个子目录， source目录，写博客的主要工作目录。这个目录下存放的是我们的markdown文章以及js, images, css themes目录，主题目录，定义了即将生成的html的layout, 和html中需要加载的css, js, images public目录, hexo generate的最终输出目录。里面包含了整个博客网站的html, css, js, images 第二次渲染，需要引入对应模板文件格式的插件，如.ejs文件就需要使用hexo-render-ejs插件，.jade文件需要使用hexo-render-jade插件，而.sass文件则需要hexo-render-sass插件来转换成css文件。hexo的这一设计有点类似webpack中的loader。 hexo插件是如何工作的hexo和webpack还有一点类似的地方就是插件驱动理念。即hexo(和webpack)是先实现一套(插件)扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件(其实就是一个个function)实现的。 具体来讲就是: hexo.extend这个对象的每个属性都是一个用来绑定(特定)插件的对象。（所谓”绑定”，其实就是对象的register方法） hexo初始化过程中先加载内部插件，再加载外部插件 而这些插件的功能分为两大类: 命令行插件和generate过程相关功能，例如： 命令行插件, hexo new, 是在hexo.extend.console对象上绑定的一个插件 generate过程相关的插件，如上文提到的往article对象添加title,content等属性的功能，是通过往hexo.extend.processer对象上绑定post插件来实现的 所以，当我们想自己动手写插件时，就是像hexo官网给出的这样,调用某个对象的register方法，如hexo.extend.console.register。 hexo和git page 如上图，(用户通过浏览器访问到的)git page上的博客网站其实是hexo generate之后生成的public目录下的内容。 所以，一个hexo博客项目应该有两个仓库: (基于hexo init结果的)博客编写仓库。可以把这个项目看成一个代码库，用来”开发”博客网站(包含写博客，生成博客等任务) 存放(hexo generate结果的)public目录仓库。这个项目是”只读”的，我们不会直接修改这个仓库的内容，我们也不会对这个仓库直接进行git pull、git commit、git push等常规操作。这个仓库的内容就是public目下的内容，即是通过hexo generate产生、hexo deploy提交的。 总结hexo简洁、强大的功能来自于自身优雅的系统设计: hexo进程启动、hexo核心对象封装、插件系统分别独立 自身采用插件驱动，生来就具备高可扩展性 文章转载于hexo是怎么工作的","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://localhost:4000/tags/Hexo/"}]},{"title":"Windows Git安装环境配置","slug":"Windows Git安装环境配置","date":"2018-05-23T08:10:42.000Z","updated":"2018-05-25T02:01:21.329Z","comments":true,"path":"2018/05/23/Windows Git安装环境配置/","link":"","permalink":"http://localhost:4000/2018/05/23/Windows Git安装环境配置/","excerpt":"","text":"世上无难事只怕有心人！ 下载安装 从Git官网下载Windows安装包，官网地址 点我 参考https://blog.csdn.net/dietime1943/article/details/71751007安装 环境变量配置环境变量Path 或者 直接使用 git-bash.exeD:\\Program Files\\Git\\cmd Git常用命令简单命令# 版本查看$ git --versiongit version 2.17.0.windows.1 新建代码库# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置# 显示当前Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name \"[name]\"$ git config [--global] user.email \"[email address]\" 增加删除文件# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2]# 停止追踪指定文件，但该文件会保留在工作区$ git rm -cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库$ git commit -a # 提交时显示所有diff信息$ git commit -v # 使用一次新的commit，代替上一次提交# 如果代码没有任何变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit, 并包括指定文件的新变化$ git commit --amend [file1] [file2] 分支# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]$ 删除远程分支$ git push origin -delete [branch-name]$ git branch -dr [remote/branch] Git原理Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 相关链接阮一峰常用 Git 命令清单","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"http://localhost:4000/tags/windows/"},{"name":"git","slug":"git","permalink":"http://localhost:4000/tags/git/"}]},{"title":"Hexo搭建博客","slug":"Hexo搭建博客","date":"2018-05-23T01:37:40.000Z","updated":"2018-05-24T01:21:52.084Z","comments":true,"path":"2018/05/23/Hexo搭建博客/","link":"","permalink":"http://localhost:4000/2018/05/23/Hexo搭建博客/","excerpt":"","text":"零基础搭建个人博客（Hexo + Git）","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://localhost:4000/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-22T07:29:40.327Z","updated":"2018-05-24T01:57:38.791Z","comments":true,"path":"2018/05/22/hello-world/","link":"","permalink":"http://localhost:4000/2018/05/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://localhost:4000/tags/Hexo/"}]}]}