{"meta":{"title":"Void","subtitle":null,"description":"爱吃爱玩的程序猿，热爱生活、热爱美食、热爱运动，有理想的一笔!","author":"Zhao Xiao Dan","url":"http://localhost:4000"},"pages":[{"title":"About","date":"2018-05-22T00:26:50.132Z","updated":"2018-05-20T12:02:05.372Z","comments":true,"path":"about/index.html","permalink":"http://localhost:4000/about/index.html","excerpt":"","text":""},{"title":"Project","date":"2018-05-22T00:26:50.133Z","updated":"2018-05-20T12:02:05.372Z","comments":true,"path":"project/index.html","permalink":"http://localhost:4000/project/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-05-22T08:31:52.960Z","updated":"2018-05-20T12:02:05.372Z","comments":true,"path":"tags/index.html","permalink":"http://localhost:4000/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"国际庄美食榜","slug":"国际庄美食榜","date":"2018-05-24T09:31:05.000Z","updated":"2018-05-24T09:32:38.944Z","comments":true,"path":"2018/05/24/国际庄美食榜/","link":"","permalink":"http://localhost:4000/2018/05/24/国际庄美食榜/","excerpt":"","text":"","categories":[],"tags":[{"name":"石家庄","slug":"石家庄","permalink":"http://localhost:4000/tags/石家庄/"},{"name":"国际庄","slug":"国际庄","permalink":"http://localhost:4000/tags/国际庄/"},{"name":"美食","slug":"美食","permalink":"http://localhost:4000/tags/美食/"}]},{"title":"国际庄篮球场征集令","slug":"国际庄篮球场收集","date":"2018-05-24T09:22:29.000Z","updated":"2018-05-24T10:22:22.474Z","comments":true,"path":"2018/05/24/国际庄篮球场收集/","link":"","permalink":"http://localhost:4000/2018/05/24/国际庄篮球场收集/","excerpt":"","text":"生命在于运动！ 活在国际庄，活在当下！作为一个热爱运动的一个伪球迷，无时无刻不被篮球砰砰砰的声音吸引，喜欢运动，喜欢篮球！","categories":[],"tags":[{"name":"石家庄","slug":"石家庄","permalink":"http://localhost:4000/tags/石家庄/"},{"name":"国际庄","slug":"国际庄","permalink":"http://localhost:4000/tags/国际庄/"},{"name":"篮球场","slug":"篮球场","permalink":"http://localhost:4000/tags/篮球场/"},{"name":"篮球","slug":"篮球","permalink":"http://localhost:4000/tags/篮球/"}]},{"title":"Hexo工作原理","slug":"Hexo如何工作","date":"2018-05-24T01:18:22.000Z","updated":"2018-05-24T01:27:54.140Z","comments":true,"path":"2018/05/24/Hexo如何工作/","link":"","permalink":"http://localhost:4000/2018/05/24/Hexo如何工作/","excerpt":"","text":"你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了： |$ hexo init // 创建一个新的hexo项目$ hexo new mynewblog // 新建一篇标题为mynewblog的文章$ hexo server // 为hexo在本地起一个http server, 然后通过浏览器访问博客$ hexo generate // 生成将要发布的博客网站包含html在内的静态资源$ hexo deploy // 将generate的结果发布到_config.yml中指定的仓库 | 可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题: 命令行中的hexo是什么 hexo是怎么将我们写好的markdown转换成html的 hexo插件是如何工作的 本地的hexo项目和git page有什么关系 本文不是: hexo的安装、使用教程 git page的使用教程 命令行中的hexo是什么?hexo项目在github上已经有超过17k的star了，但是你知道吗，日常我们在命令行”操作”hexo时所输入的hexo(例如hexo init)并不是这个17k个star的项目! 是的，我们在命令行中所输入的”hexo”实际是hexo-cli项目，该项目在github上的star还不足50个。 hexo可以粗略分为三个子项目，分别是: hexo-cli hexo (下文中用hexo core来指代) hexo plugins 其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。 请看下图:让我们结合这张图来大致看看这三个项目的作用(下面的链接均是指向Github中相关的源码): hexo-cli: hexo命令行项目，作用是: 启动hexo命令(进程)，及其参数解析机制。每次我们输入’hexo xxx’命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’) 实现hexo命令的三个初始参数(功能): init / version / help 加载hexo核心模块，并初始化 hexo core: hexo核心，他的主要作用如下: 实现了hexo功能扩展对象 实现了hexo核心功能, 如new, publish, generate等（其实是一些hexo插件，下文中会详细分析） hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类: 扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令) 扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件 从markdown到html的旅程简单来说，hexo中，从markdown到html的generate过程中做了两件事： 模板渲染 模板渲染 是的，就是这样，就是两次模板渲染。只不过两次渲染的输入、渲染模板的引擎、输出不一样。此处应该有一个表格：还得有一张图: 对上面表格和图的说明: hexo core在generate的过程中会产生一个对象，我们在这里把这个对象称为article。第一次渲染的主要目的就是给这个对象添加title,content等属性。其中: article.title, article.date, article.tags, article.categories等属性来自yml front的部分 article.content是markdown文章解析后的html片段 hexo项目目录下包含三个子目录， source目录，写博客的主要工作目录。这个目录下存放的是我们的markdown文章以及js, images, css themes目录，主题目录，定义了即将生成的html的layout, 和html中需要加载的css, js, images public目录, hexo generate的最终输出目录。里面包含了整个博客网站的html, css, js, images 第二次渲染，需要引入对应模板文件格式的插件，如.ejs文件就需要使用hexo-render-ejs插件，.jade文件需要使用hexo-render-jade插件，而.sass文件则需要hexo-render-sass插件来转换成css文件。hexo的这一设计有点类似webpack中的loader。 hexo插件是如何工作的hexo和webpack还有一点类似的地方就是插件驱动理念。即hexo(和webpack)是先实现一套(插件)扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件(其实就是一个个function)实现的。 具体来讲就是: hexo.extend这个对象的每个属性都是一个用来绑定(特定)插件的对象。（所谓”绑定”，其实就是对象的register方法） hexo初始化过程中先加载内部插件，再加载外部插件 而这些插件的功能分为两大类: 命令行插件和generate过程相关功能，例如： 命令行插件, hexo new, 是在hexo.extend.console对象上绑定的一个插件 generate过程相关的插件，如上文提到的往article对象添加title,content等属性的功能，是通过往hexo.extend.processer对象上绑定post插件来实现的 所以，当我们想自己动手写插件时，就是像hexo官网给出的这样,调用某个对象的register方法，如hexo.extend.console.register。 hexo和git page 如上图，(用户通过浏览器访问到的)git page上的博客网站其实是hexo generate之后生成的public目录下的内容。 所以，一个hexo博客项目应该有两个仓库: (基于hexo init结果的)博客编写仓库。可以把这个项目看成一个代码库，用来”开发”博客网站(包含写博客，生成博客等任务) 存放(hexo generate结果的)public目录仓库。这个项目是”只读”的，我们不会直接修改这个仓库的内容，我们也不会对这个仓库直接进行git pull、git commit、git push等常规操作。这个仓库的内容就是public目下的内容，即是通过hexo generate产生、hexo deploy提交的。 总结hexo简洁、强大的功能来自于自身优雅的系统设计: hexo进程启动、hexo核心对象封装、插件系统分别独立 自身采用插件驱动，生来就具备高可扩展性 文章转载于hexo是怎么工作的","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://localhost:4000/tags/Hexo/"}]},{"title":"Windows Git安装环境配置","slug":"Windows Git安装环境配置","date":"2018-05-23T08:10:42.000Z","updated":"2018-05-24T09:03:36.738Z","comments":true,"path":"2018/05/23/Windows Git安装环境配置/","link":"","permalink":"http://localhost:4000/2018/05/23/Windows Git安装环境配置/","excerpt":"","text":"世上无难事只怕有心人！ 下载安装 从Git官网下载Windows安装包，官网地址 点我 参考https://blog.csdn.net/dietime1943/article/details/71751007安装 环境变量配置环境变量Path 或者 直接使用 git-bash.exeD:\\Program Files\\Git\\cmd Git常用命令简单命令# 版本查看$ git --versiongit version 2.17.0.windows.1 新建代码库# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置# 显示当前Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name \"[name]\"$ git config [--global] user.email \"[email address]\" 增加删除文件# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2]# 停止追踪指定文件，但该文件会保留在工作区$ git rm -cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库$ git commit -a # 提交时显示所有diff信息$ git commit -v # 使用一次新的commit，代替上一次提交# 如果代码没有任何变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit, 并包括指定文件的新变化$ git commit --amend [file1] [file2] 分支# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]$ 删除远程分支$ git push origin -delete [branch-name]$ git branch -dr [remote/branch] Git原理Workspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库 相关链接阮一峰常用 Git 命令清单","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"http://localhost:4000/tags/windows/"},{"name":"git","slug":"git","permalink":"http://localhost:4000/tags/git/"}]},{"title":"Hexo搭建博客","slug":"Hexo搭建博客","date":"2018-05-23T01:37:40.000Z","updated":"2018-05-24T01:21:52.084Z","comments":true,"path":"2018/05/23/Hexo搭建博客/","link":"","permalink":"http://localhost:4000/2018/05/23/Hexo搭建博客/","excerpt":"","text":"零基础搭建个人博客（Hexo + Git）","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://localhost:4000/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-22T07:29:40.327Z","updated":"2018-05-24T01:57:38.791Z","comments":true,"path":"2018/05/22/hello-world/","link":"","permalink":"http://localhost:4000/2018/05/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://localhost:4000/tags/Hexo/"}]}]}